--[[
--This is an example of cli_filter.lua script for Slurm
--More information about Slurm cli_filter:
-- https://slurm.schedmd.com/cli_filter_plugins.html
--To find names of options, take a look at:
-- src/common/slurm_opt.c
--]]

-- Path to define apptype.properties
properties_path = "/opt/gridview/slurm/etc/apptype.properties"


-- Define a function to read the apptype.properties file and build a hash table
function read_properties(file_path)
    local hash_table = {}

    local file = io.open(file_path, "r")
    if not file then
        return nil
    end

    for line in file:lines() do
        if not line:match("^#") then
            local key, value = line:match("([^=]+)=([^=]+)")
            if key and value then
                hash_table[key:lower()] = value -- Convert key to lowercase
            end 
        end 
    end 

    file:close()

    return hash_table
end


-- Define a function to resolve the script path
function resolve_path(work_dir, script)
    if script:sub(1, 1) == "/" then
        return script -- Absolute path, return directly
    else
        return work_dir .. "/" .. script -- Relative path, append the working directory
    end
end

-- Process the script file and match using the hash table
function process_script(script_path, hash_table)
    local file = io.open(script_path, "r")
    if not file then
        return nil
    end

    local weak_apptypes = (hash_table["weak_apptype"] or ""):lower() -- Convert weak application types to lowercase
    local weak_match = nil -- Variable to store a weak application type match

    for line in file:lines() do
        -- First-level tokenization: Split by spaces
        for space_word in line:gmatch("%S+") do
            local lower_space_word = space_word:lower() -- Convert token to lowercase for case-insensitive match
            if hash_table[lower_space_word] then
                local value = hash_table[lower_space_word]
                if weak_apptypes:find(value:lower()) then
                    weak_match = value -- Store weak match
                else
                    file:close()
                    return value -- Return strong match immediately
                end
            else
                -- Second-level tokenization: Split by "/"
                for slash_word in space_word:gmatch("[^/]+") do
                    local lower_slash_word = slash_word:lower() -- Convert token to lowercase
                    if hash_table[lower_slash_word] then
                        local value = hash_table[lower_slash_word]
                        if weak_apptypes:find(value:lower()) then
                            weak_match = value -- Store weak match
                        else
                            file:close()
                            return value -- Return strong match immediately
                        end
                    else
                        -- Third-level tokenization: Split by ".", "-", "=", "_", "+"
                        for fine_word in slash_word:gmatch("[^%.%-=_%+]+") do
                            local lower_fine_word = fine_word:lower() -- Convert token to lowercase
                            if hash_table[lower_fine_word] then
                                local value = hash_table[lower_fine_word]
                                if weak_apptypes:find(value:lower()) then
                                    weak_match = value -- Store weak match
                                else
                                    file:close()
                                    return value -- Return strong match immediately
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    file:close()
    return weak_match -- Return weak match if no strong match was found
end


-- A function that separates strings
function split_string(input, sep)
    sep = sep or "%s"
    local fields = {}
    for str in string.gmatch(input, "([^" .. sep .. "]+)") do
        table.insert(fields, str)
    end
    return fields
end

-- Parses the string and looks up the mapped value in the hash table
function process_string(input_str, hash_table)
    if not input_str or input_str:match("^%s*$") then
        return nil -- If it is empty or contains only whitespace characters, return nil
    end

    local weak_apptypes = (hash_table["weak_apptype"] or ""):lower() -- Retrieve weak application types as a lowercase string
    local weak_match = nil -- Variable to store a weak application type match

    -- Coarse-grained tokenization: split the string by spaces
    for coarse_word in input_str:gmatch("%S+") do
        local lower_coarse_word = coarse_word:lower() -- Convert token to lowercase
        -- Directly lookup in the hash table
        if hash_table[lower_coarse_word] then
            local value = hash_table[lower_coarse_word]
            if weak_apptypes:find(value:lower()) then
                weak_match = value -- Store weak match
            else
                return value -- Return strong match immediately
            end
        else
            -- Medium-grained tokenization: split by '/'
            for mid_word in coarse_word:gmatch("[^/]+") do
                local lower_mid_word = mid_word:lower() -- Convert token to lowercase
                if hash_table[lower_mid_word] then
                    local value = hash_table[lower_mid_word]
                    if weak_apptypes:find(value:lower()) then
                        weak_match = value -- Store weak match
                    else
                        return value -- Return strong match immediately
                    end
                else
                    -- Fine-grained tokenization: split by '.-=_+'
                    for fine_word in mid_word:gmatch("[^%.%-=_%+]+") do
                        local lower_fine_word = fine_word:lower() -- Convert token to lowercase
                        if hash_table[lower_fine_word] then
                            local value = hash_table[lower_fine_word]
                            if weak_apptypes:find(value:lower()) then
                                weak_match = value -- Store weak match
                            else
                                return value -- Return strong match immediately
                            end
                        end
                    end
                end
            end
        end
    end

    return weak_match -- Return weak match if no strong match was found
end

-- Determine how assignments are submitted
function check_command_type(line)
    local elements = split_string(line)
    if #elements > 0 then
        local first_element = elements[1]
        if first_element:sub(-6) == "sbatch" then
            return 0 -- sbatch
        elseif first_element:sub(-4) == "srun" then
            return 1 -- srun
        elseif first_element:sub(-6) == "salloc" then
            return 2 -- salloc
        else
            return -1 -- unknown command
        end
    else
        return -1 
    end
end

function get_apptype(options)

    -- 1. Retrieve submit_line, work_dir, and apptype
    local submit_line = options["submit-line"]
    local work_dir = options["chdir"] or ""
    local apptype = options["apptype"] 

    if apptype ~= nil and apptype == "unset" then
        return "unset"
    end

    -- 2. Get the properties file path and construct the hash table
    local hash_table = read_properties(properties_path)
    if not hash_table then return nil end
    
    -- 3. Determine the job submission type
    if not submit_line then return nil end
    local submit_type = check_command_type(submit_line)
    if not submit_type then return nil end

    -- 4. Map the application type with work path, submit command, comment, and jobname
    local jobname = options["job-name"] or ""
    local comment = options["comment"] or ""

    local temp = table.concat({jobname, comment, submit_line, work_dir}, " ")
    local result = process_string(temp, hash_table)
    if result ~= nil then
        options["apptype"] = result
        return result
    end

    -- 5. Handle different submission methods
    if submit_type == 0 then
        -- Extract the script path
        local script = submit_line:match("%S+$")
        -- Construct the script path using workdir
        if not work_dir then return nil end
        local script_path = resolve_path(work_dir, script)
        -- Process the script and return the application type
        local result = process_script(script_path, hash_table)
        -- Log the application type
        if result ~= nil then
            options["apptype"] = result
            return result
        end

    elseif submit_type == 1 then
        -- srun
        local result = process_string(apptype, hash_table)
        if result ~= nil then
            options["apptype"] = result
            return result
        end
    elseif submit_type == 2 then
        -- salloc
    end

    return nil
end 

function slurm_cli_pre_submit(options, pack_offset)
    local apptype_result = get_apptype(options)
    if apptype_result ~= nil then
        options["apptype"] = apptype_result
    end
    return slurm.SUCCESS

end


function slurm_cli_setup_defaults(options, early_pass)
	return slurm.SUCCESS
end

function slurm_cli_post_submit(offset, job_id, step_id)
	return slurm.SUCCESS
end
